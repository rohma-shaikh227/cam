import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'dart:io';
import 'package:path_provider/path_provider.dart';

List<CameraDescription>? cameras;

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  cameras = await availableCameras();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Camera Example',
      home: CameraScreen(),
    );
  }
}

class CameraScreen extends StatefulWidget {
  @override
  _CameraScreenState createState() => _CameraScreenState();
}

class _CameraScreenState extends State<CameraScreen> {
  late CameraController controller;

  @override
  void initState() {
    super.initState();
    initializeCamera();
  }

  void initializeCamera() async {
    final frontCamera = cameras!.firstWhere(
            (camera) => camera.lensDirection == CameraLensDirection.front);

    controller = CameraController(frontCamera, ResolutionPreset.high);

    try {
      await controller.initialize();
    } catch (e) {
      print('Failed to initialize camera: $e');
    }

    if (!mounted) {
      return;
    }

    setState(() {});
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (!controller.value.isInitialized) {
      return Container();
    }
    return Scaffold(
      body: CameraPreview(controller),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          _startVideoRecording();
        },
        child: Icon(Icons.camera),
      ),
    );
  }

  void _startVideoRecording() async {
    if (!controller.value.isInitialized) {
      return;
    }
    final Directory appDirectory = await getApplicationDocumentsDirectory();
    final String videoDirectory = '${appDirectory.path}/Videos';
    await Directory(videoDirectory).create(recursive: true);
    final String videoPath = '$videoDirectory/${DateTime.now().millisecondsSinceEpoch}.mp4';

    try {
      await controller.startVideoRecording().then((value) => videoPath);
      // Wait for some time to record the video (e.g., 10 seconds)
      await Future.delayed(Duration(seconds: 10));
      await controller.stopVideoRecording();
      convertVideoToByteStream(videoPath);
    } catch (e) {
      print(e);
    }
  }

  void convertVideoToByteStream(String videoPath) async {
    final File videoFile = File(videoPath);
    final List<int> videoBytes = await videoFile.readAsBytes();

    // Here, you can send the videoBytes to your streaming server or process them as needed.
    // Example: sendBytesToServer(videoBytes);
  }
}
